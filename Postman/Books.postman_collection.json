{
	"info": {
		"_postman_id": "a63ecafc-a349-4ba4-b25c-3fcd32c5c5db",
		"name": "Books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17355994"
	},
	"item": [
		{
			"name": "Create token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Token is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).is.not.empty;\r",
							"});\r",
							"pm.test(\"Set variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"token\", jsonData.token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get booking all ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Body of response is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "",
							"description": "Return bookings with a specific firstname",
							"disabled": true
						},
						{
							"key": "lastname",
							"value": "",
							"description": "Return bookings with a specific lastname",
							"disabled": true
						},
						{
							"key": "checkin",
							"value": "",
							"description": "date",
							"disabled": true
						},
						{
							"key": "checkout",
							"value": "",
							"description": "date",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Set variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"myID\", jsonData.bookingid);\r",
							"});\r",
							"pm.test(\"Response have key additionalneeds check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.booking).to.have.any.keys(\"additionalneeds\");\r",
							"});\r",
							"pm.test(\"Special check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    let price = jsonData.booking.totalprice;\r",
							"    console.log(price);\r",
							"    let isLess;\r",
							"    if (price <= 100){\r",
							"        isLess = true\r",
							"    };\r",
							"    pm.expect(isLess).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"addneeds\", \"Basketball\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Eugene\",\r\n    \"lastname\" : \"Oigenius\",\r\n    \"totalprice\" : 29,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2021-01-01\",\r\n        \"checkout\" : \"2022-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"{{addneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get booking after creating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"depositpaid key check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.any.keys(\"depositpaid\");\r",
							"});\r",
							"pm.test(\"First value check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(\"Eugene\");\r",
							"});\r",
							"pm.test(\"Second value check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.additionalneeds).to.eql(\"Basketball\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking/{{myID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{myID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"updateFN\", \"Eugenius\");\r",
							"pm.environment.set(\"updateLN\", \"BasedBoi\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let fn = pm.environment.get(\"updateFN\");\r",
							"pm.test(\"Equivalence check 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(fn);\r",
							"});\r",
							"let ln = pm.environment.get(\"updateLN\");\r",
							"pm.test(\"Equivalence check 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(ln);\r",
							"});\r",
							"pm.test(\"Special check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    let price = jsonData.totalprice;\r",
							"    console.log(price);\r",
							"    let isMore;\r",
							"    if (price => 100){\r",
							"        isMore = true\r",
							"    };\r",
							"    pm.expect(isMore).to.be.true;\r",
							"});\r",
							"let header = pm.request.headers.get(\"Authorization\");\r",
							"pm.test(\"Request header is not empty\", function () {\r",
							"    pm.expect(header).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{updateFN}}\",\r\n    \"lastname\" : \"{{updateLN}}\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/{{myID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{myID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get booking after updating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"depositpaid key check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.any.keys(\"depositpaid\");\r",
							"});\r",
							"pm.test(\"First value check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(\"Eugenius\");\r",
							"});\r",
							"pm.test(\"Second value check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(\"BasedBoi\");\r",
							"});\r",
							"pm.test(\"Third value check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.additionalneeds).to.eql(\"Breakfast\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"updateLN\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking/{{myID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{myID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"updateLN\", \"Yacobs\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let header = pm.request.headers.get(\"Authorization\");\r",
							"pm.test(\"Request header is not empty\", function () {\r",
							"    pm.expect(header).not.to.be.empty;\r",
							"});\r",
							"let ln = pm.environment.get(\"updateLN\");\r",
							"pm.test(\"Equivalence check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(ln);\r",
							"});\r",
							"let some = false;\r",
							"pm.test(\"Json value check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.depositpaid).to.eql(some);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastname\" : \"{{updateLN}}\",\r\n    \"depositpaid\" : false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/{{myID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{myID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get booking after patching",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"depositpaid key check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.any.keys(\"depositpaid\");\r",
							"});\r",
							"pm.test(\"First value check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.totalprice).to.eql(111);\r",
							"});\r",
							"pm.test(\"Second value check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(\"Yacobs\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"updateLN\");\r",
							"pm.environment.unset(\"updateFN\");\r",
							"pm.environment.unset(\"addneeds\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking/{{myID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{myID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Body of response is not empty\", function () {\r",
							"    var jsonData = pm.response;\r",
							"    pm.expect(jsonData).not.to.be.empty;\r",
							"});\r",
							"let header = pm.request.headers.get(\"Authorization\");\r",
							"pm.test(\"Request header is not empty\", function () {\r",
							"    pm.expect(header).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/booking/{{myID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{myID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get booking after deleting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Body of response is not empty\", function () {\r",
							"    var jsonData = pm.response;\r",
							"    pm.expect(jsonData).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking/{{myID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{myID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Body of response is not empty\", function () {\r",
							"    var jsonData = pm.response;\r",
							"    pm.expect(jsonData).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/ping",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://restful-booker.herokuapp.com",
			"type": "string"
		}
	]
}